!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/paulo/Programming/42/cpp_projects/cpp05/ex02/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
AForm	AForm.hpp	/^class AForm$/;"	c
BUREAUCRAT_HPP	Bureaucrat.hpp	/^#define BUREAUCRAT_HPP$/;"	d
Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::Bureaucrat() : _name("Default_name"), _grade(150){}$/;"	f	class:Bureaucrat
Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::Bureaucrat(const Bureaucrat& other) : _name(other._name), _grade(other._grade){}$/;"	f	class:Bureaucrat
Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::Bureaucrat(const std::string name, int grade) : _name(name), _grade(grade)$/;"	f	class:Bureaucrat
Bureaucrat	Bureaucrat.hpp	/^class Bureaucrat$/;"	c
FORM_HPP	AForm.hpp	/^#define FORM_HPP$/;"	d
Form	AForm.cpp	/^Form::Form() : _name("default"), _isSigned(false), _signGrade(150), _executeGrade(150){}$/;"	f	class:Form
Form	AForm.cpp	/^Form::Form(const Form& other) : $/;"	f	class:Form
Form	AForm.cpp	/^Form::Form(const std::string& name, int signGrade, int executeGrade) : $/;"	f	class:Form
GradeTooHighException	AForm.hpp	/^		class GradeTooHighException : public std::exception$/;"	c	class:AForm
GradeTooHighException	Bureaucrat.hpp	/^		class GradeTooHighException : public std::exception$/;"	c	class:Bureaucrat
GradeTooLowException	AForm.hpp	/^		class GradeTooLowException : public std::exception$/;"	c	class:AForm
GradeTooLowException	Bureaucrat.hpp	/^		class GradeTooLowException : public std::exception$/;"	c	class:Bureaucrat
SHRUBBERYCREATIONFORM_HPP	ShrubberryCreationForm.hpp	/^#define SHRUBBERYCREATIONFORM_HPP$/;"	d
ShrubberyCreationForm	ShrubberryCreationForm.hpp	/^class ShrubberyCreationForm : public AForm$/;"	c
_executeGrade	AForm.hpp	/^		const int		_executeGrade;$/;"	m	class:AForm	typeref:typename:const int
_grade	Bureaucrat.hpp	/^		int			_grade;$/;"	m	class:Bureaucrat	typeref:typename:int
_isSigned	AForm.hpp	/^		bool			_isSigned;$/;"	m	class:AForm	typeref:typename:bool
_name	AForm.hpp	/^		const std::string	_name;$/;"	m	class:AForm	typeref:typename:const std::string
_name	Bureaucrat.hpp	/^		const std::string 	_name;$/;"	m	class:Bureaucrat	typeref:typename:const std::string
_signGrade	AForm.hpp	/^		const int		_signGrade;$/;"	m	class:AForm	typeref:typename:const int
beSigned	AForm.cpp	/^void Form::beSigned(const Bureaucrat& bureaucrat)$/;"	f	class:Form	typeref:typename:void
decrementGrade	Bureaucrat.cpp	/^void Bureaucrat::decrementGrade()$/;"	f	class:Bureaucrat	typeref:typename:void
getExecuteGrade	AForm.cpp	/^int Form::getExecuteGrade() const$/;"	f	class:Form	typeref:typename:int
getGrade	Bureaucrat.cpp	/^int Bureaucrat::getGrade() const$/;"	f	class:Bureaucrat	typeref:typename:int
getIsSigned	AForm.cpp	/^bool Form::getIsSigned() const$/;"	f	class:Form	typeref:typename:bool
getName	AForm.cpp	/^const std::string& Form::getName() const$/;"	f	class:Form	typeref:typename:const std::string &
getName	Bureaucrat.cpp	/^const std::string Bureaucrat::getName() const$/;"	f	class:Bureaucrat	typeref:typename:const std::string
getSignGrade	AForm.cpp	/^int Form::getSignGrade() const$/;"	f	class:Form	typeref:typename:int
incrementGrade	Bureaucrat.cpp	/^void Bureaucrat::incrementGrade()$/;"	f	class:Bureaucrat	typeref:typename:void
operator <<	AForm.cpp	/^std::ostream& operator<<(std::ostream& out, const Form& form)$/;"	f	typeref:typename:std::ostream &
operator <<	Bureaucrat.cpp	/^std::ostream& operator<<(std::ostream& out, const Bureaucrat& bureaucrat)$/;"	f	typeref:typename:std::ostream &
operator =	AForm.cpp	/^Form& Form::operator=(const Form& other)$/;"	f	class:Form	typeref:typename:Form &
operator =	Bureaucrat.cpp	/^Bureaucrat& Bureaucrat::operator=(const Bureaucrat& other)$/;"	f	class:Bureaucrat	typeref:typename:Bureaucrat &
signForm	Bureaucrat.cpp	/^void Bureaucrat::signForm(Form& form) const$/;"	f	class:Bureaucrat	typeref:typename:void
what	AForm.cpp	/^const char * Form::GradeTooHighException::what() const throw()$/;"	f	class:Form::GradeTooHighException	typeref:typename:const char *
what	AForm.cpp	/^const char * Form::GradeTooLowException::what() const throw()$/;"	f	class:Form::GradeTooLowException	typeref:typename:const char *
what	Bureaucrat.cpp	/^const char * Bureaucrat::GradeTooHighException::what() const throw()$/;"	f	class:Bureaucrat::GradeTooHighException	typeref:typename:const char *
what	Bureaucrat.cpp	/^const char * Bureaucrat::GradeTooLowException::what() const throw()$/;"	f	class:Bureaucrat::GradeTooLowException	typeref:typename:const char *
~Bureaucrat	Bureaucrat.cpp	/^Bureaucrat::~Bureaucrat(){}$/;"	f	class:Bureaucrat
~Form	AForm.cpp	/^Form::~Form(){}$/;"	f	class:Form
